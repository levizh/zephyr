/*
 * Copyright (C) 2022-2024, Xiaohua Semiconductor Co., Ltd.
 * SPDX-License-Identifier: Apache-2.0
 */

/dts-v1/;
#include <xhsc/f4/hc32f4a0.dtsi>
#include "hc32f4a0_evb-pinctrl.dtsi"

/ {
	model = "xhsc, EV_F4A0_LQ176_Rev1.0 board";
	compatible = "xhsc,hc32f4a0_evb";

	chosen {
		zephyr,sram = &sram0;
		zephyr,flash = &flash0;
		zephyr,console = &usart1;
		zephyr,shell-uart = &usart1;
	};

	leds {
		compatible = "gpio-leds";
		blue_led: led_0 {
			gpios = <&gpioc 9 GPIO_ACTIVE_HIGH>;
			label = "User LED";
		};
	};

	gpio_keys {
		compatible = "gpio-keys";
		user_button: button {
			label = "Wkup_key";
			gpios = <&gpioa 0 GPIO_ACTIVE_LOW>;
		};
	};

	aliases {
		led0 = &blue_led;
		sw0 = &user_button;
	};
};
&gpioa {
	status = "okay";
};

&gpiob {
	status = "okay";
};

&gpioc {
	status = "okay";
};

&gpiod {
	status = "okay";
};

&gpioe {
	status = "okay";
};

&gpiof {
	status = "okay";
};

&gpiog {
	status = "okay";
};

&gpioh {
	status = "okay";
};

&gpioi {
	status = "okay";
};

&clk_xtal {
	status = "okay";
};

&clk_xtal32 {
	status = "okay";
};

&clk_hrc {
	status = "okay";
};

&clk_mrc {
	status = "okay";
};

&clk_lrc {
	status = "okay";
};

&clk_pll {
	status = "okay";
};

&usart1 {
	status = "okay";
	current-speed = <115200>;
	pinctrl-0 = <&usart1_default>;
	pinctrl-names = "default";
};

&spi6 {
	status = "okay";
	pinctrl-0 = <&spi6_default>;
	pinctrl-names = "default";
	cs-gpios = <&gpioe 6 GPIO_ACTIVE_LOW>;
};

&i2c1 {
	status = "okay";
	pinctrl-0 = <&i2c1_default>;
	pinctrl-names = "default";
	dmas = <&dma1 0 INT_SRC_I2C1_TEI (HC32_DMA_MEMORY_TO_PERIPH | HC32_DMA_SOURCE_ADDR_INC | HC32_DMA_DEST_ADDR_FIX | HC32_DMA_DATA_WIDTH_8BIT)>,
			<&dma1 1 INT_SRC_I2C1_RXI (HC32_DMA_PERIPH_TO_MEMORY | HC32_DMA_SOURCE_ADDR_FIX | HC32_DMA_DEST_ADDR_INC | HC32_DMA_DATA_WIDTH_8BIT)>;
	dma-names = "tx_dma","rx_dma";
	scl-gpios = <&gpiod 3 GPIO_OPEN_DRAIN>;
	sda-gpios = <&gpiof 10 GPIO_OPEN_DRAIN>;
	clock-frequency = < 100000 >;
	/* delete dma property once use interrupt transfer.
	** dma-names must be named "tx_dma","rx_dma" while used dma transfer for i2c.
	** example :
	** dma-names = "tx_dma","rx_dma";
	*/
	/delete-property/ dmas;
	/delete-property/ dma-names;
};

&i2c3 {
	status = "okay";
	clock-frequency = < 100000 >;
	pinctrl-0 = <&i2c3_default>;
	pinctrl-names = "default";
};

&i2c4 {
	pinctrl-0 = <&i2c4_default>;
	pinctrl-names = "default";
};

&timera9 {

	qdec {
		pinctrl-0 = <&tmra9_qdec_default>;
		pinctrl-names = "default";
		hw-count-conditions = <(TMR_UP_COND_A_H_B_R | TMR_UP_COND_B_H_A_F | 
								TMR_DOWN_COND_A_H_B_F | TMR_DOWN_COND_B_H_A_R)>;
		counts-per-revolution = <2000>;
	};
};

&i2s1 {
	status = "okay";
	pinctrl-0 = <&i2s1_default>;
	pinctrl-names = "default";

	dmas = <&dma1 0 INT_SRC_I2S1_TXIRQOUT (HC32_DMA_MEMORY_TO_PERIPH | HC32_DMA_SOURCE_ADDR_INC | HC32_DMA_DEST_ADDR_FIX | HC32_DMA_DATA_WIDTH_16BIT)>,
			<&dma1 1 INT_SRC_I2S1_RXIRQOUT (HC32_DMA_PERIPH_TO_MEMORY | HC32_DMA_SOURCE_ADDR_FIX | HC32_DMA_DEST_ADDR_INC | HC32_DMA_DATA_WIDTH_16BIT)>;
	dma-names = "tx_dma","rx_dma";

	src-clk = <0>; /* PLL */
	i2s-pll-clk = <0>; /* PCLK1 */
};
